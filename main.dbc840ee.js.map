{"version":3,"sources":["scripts/main.js"],"names":["baseUrl","request","url","fetch","then","response","Error","json","elementMaker","className","title","data","document","body","insertAdjacentHTML","map","el","name","join","getFirstReceivedDetails","getAllSuccessfulDetails","getThreeFastestDetails","arr","Promise","race","phone","id","all"],"mappings":";AAAA,aAEA,IAAMA,EACF,mEAEEC,EAAU,WAACC,IAAAA,EAAM,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACdC,OAAAA,MAASH,GAAAA,OAAAA,GAAUE,OAAAA,EAAnB,UACJE,KAAK,SAAAC,GACA,IAACA,EACG,MAAA,IAAIC,MAAM,mBAGXD,OAAAA,EAASE,UAItB,SAASC,EAAaC,EAAWC,EAAOC,GACtCC,SAASC,KAAKC,mBAAmB,YACjBL,qBAAAA,OAAAA,EACNC,kBAAAA,OAAAA,EAEFC,+BAAAA,OAAAA,EAAKI,IAAI,SAAAC,GAAaA,MAAAA,OAAAA,OAAAA,EAAGC,KAAd,WAA2BC,KAAK,IAJnD,kCAUF,IAAMC,EAA0B,WAAMlB,OAAAA,KAChCmB,EAA0B,WAAMnB,OAAAA,KAChCoB,EAAyB,WAAMpB,OAAAA,KAErCkB,IACGf,KAAK,SAAAkB,GACGC,OAAAA,QAAQC,KAAKF,EAAIP,IAAI,SAAAU,GAASxB,OAAAA,EAAYwB,IAAAA,OAAAA,EAAMC,UAExDtB,KAAK,SAAAkB,GACJd,EAAa,iBAAkB,gBAAiB,CAACc,MAGrDF,IACGhB,KAAK,SAAAkB,GACGC,OAAAA,QAAQI,IAAIL,EAAIP,IAAI,SAAAU,GAASxB,OAAAA,EAAYwB,IAAAA,OAAAA,EAAMC,UAEvDtB,KAAK,SAAAkB,GACJd,EAAa,iBAAkB,iBAAkBc,KAGrDD,IACGjB,KAAK,SAAAkB,GACGC,OAAAA,QAAQI,IAAI,CACjBJ,QAAQC,KAAKF,EAAIP,IAAI,SAAAU,GAASxB,OAAAA,EAAYwB,IAAAA,OAAAA,EAAMC,QAChDH,QAAQC,KAAKF,EAAIP,IAAI,SAAAU,GAASxB,OAAAA,EAAYwB,IAAAA,OAAAA,EAAMC,QAChDH,QAAQC,KAAKF,EAAIP,IAAI,SAAAU,GAASxB,OAAAA,EAAYwB,IAAAA,OAAAA,EAAMC,YAGnDtB,KAAK,SAAAkB,GACJd,EAAa,gBAAiB,gBAAiBc","file":"main.dbc840ee.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst baseUrl\n  = 'https://mate-academy.github.io/phone-catalogue-static/api/phones';\n\nconst request = (url = '') => {\n  return fetch(`${baseUrl}${url}.json`)\n    .then(response => {\n      if (!response) {\n        throw new Error('Something wrong');\n      }\n\n      return response.json();\n    });\n};\n\nfunction elementMaker(className, title, data) {\n  document.body.insertAdjacentHTML('beforeend', `\n    <div class=\"${className}\">\n      <h3>${title}</h3>\n      <ul>\n        ${data.map(el => `<li>${el.name}</li>`).join('')}\n      </ul>\n    </div>\n  `);\n};\n\nconst getFirstReceivedDetails = () => request();\nconst getAllSuccessfulDetails = () => request();\nconst getThreeFastestDetails = () => request();\n\ngetFirstReceivedDetails()\n  .then(arr => {\n    return Promise.race(arr.map(phone => request(`/${phone.id}`)));\n  })\n  .then(arr => {\n    elementMaker('first-received', 'First Fastest', [arr]);\n  });\n\ngetAllSuccessfulDetails()\n  .then(arr => {\n    return Promise.all(arr.map(phone => request(`/${phone.id}`)));\n  })\n  .then(arr => {\n    elementMaker('all-successful', 'All Successful', arr);\n  });\n\ngetThreeFastestDetails()\n  .then(arr => {\n    return Promise.all([\n      Promise.race(arr.map(phone => request(`/${phone.id}`))),\n      Promise.race(arr.map(phone => request(`/${phone.id}`))),\n      Promise.race(arr.map(phone => request(`/${phone.id}`))),\n    ]);\n  })\n  .then(arr => {\n    elementMaker('three-fasters', 'Three fasters', arr);\n  });\n"]}